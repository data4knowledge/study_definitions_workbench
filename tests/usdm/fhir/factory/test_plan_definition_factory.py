from app.usdm.fhir.factory.plan_definition_factory import PlanDefinitionFactory
from tests.usdm.fhir.factory.dict_result import DictResult

def test_plan_definition():
  params = {"status": "active"}
  expected = {
    'action': None,
    'actor': None,
    'approvalDate': None,
    'approvalDate__ext': None,
    'asNeededBoolean': None,
    'asNeededBoolean__ext': None,
    'asNeededCodeableConcept': None,
    'author': None,
    'contact': None,
    'contained': None,
    'copyright': None,
    'copyrightLabel': None,
    'copyrightLabel__ext': None,
    'copyright__ext': None,
    'date': None,
    'date__ext': None,
    'description': None,
    'description__ext': None,
    'editor': None,
    'effectivePeriod': None,
    'endorser': None,
    'experimental': None,
    'experimental__ext': None,
    'extension': None,
    'fhir_comments': None,
    'goal': None,
    'id': None,
    'identifier': None,
    'implicitRules': None,
    'implicitRules__ext': None,
    'jurisdiction': None,
    'language': None,
    'language__ext': None,
    'lastReviewDate': None,
    'lastReviewDate__ext': None,
    'library': None,
    'library__ext': None,
    'meta': None,
    'modifierExtension': None,
    'name': None,
    'name__ext': None,
    'publisher': None,
    'publisher__ext': None,
    'purpose': None,
    'purpose__ext': None,
    'relatedArtifact': None,
    'resource_type': 'PlanDefinition',
    'reviewer': None,
    'status': 'active',
    'status__ext': None,
    'subjectCanonical': None,
    'subjectCanonical__ext': None,
    'subjectCodeableConcept': None,
    'subjectReference': None,
    'subtitle': None,
    'subtitle__ext': None,
    'text': None,
    'title': None,
    'title__ext': None,
    'topic': None,
    'type': None,
    'url': None,
    'url__ext': None,
    'usage': None,
    'usage__ext': None,
    'useContext': None,
    'version': None,
    'versionAlgorithmCoding': None,
    'versionAlgorithmString': None,
    'versionAlgorithmString__ext': None,
    'version__ext': None,
  }
  result = PlanDefinitionFactory(**params)
  assert result.item is not None
  assert DictResult(result.item).result == expected

def test_plan_definition_error():
  params = {'valueString': (1,2)} # Force an exception, code not a string type
  result = PlanDefinitionFactory(**params)
  assert result.item is None
